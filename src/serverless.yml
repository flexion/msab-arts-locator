service: msab-arts-locator

plugins:
  - fullstack-serverless
  - serverless-stack-output
  - serverless-offline

useDotenv: true
custom:
  domain: ${opt:stage}.${env:domainNameRoot}
  region: ${opt:region, 'us-east-2'}
  certificateId: ${env:certificateId} # Required by AWS to be in us-east-1
  apiKey: ${env:googleGeocodingApiKey} #api key to use google maps api
  captchaKey: ${env:googleCaptchaKey, ''}
  captchaGateway: ${env:googleCaptchaGateway, ''}
  imageBucket: ${self:service}-${opt:stage}-images
  loggingBucket: ${self:service}-${opt:stage}-logs
  emailGateway: ${env:emailGateway, 'gmail'}
  emailUser: ${env:emailUsername}
  emailPW: ${env:emailPassword}

  output:
    file: .serverless/stack.json

  fullstack:
    noConfirm: true
    domain: ${self:custom.domain}
    certificate:
      Fn::Join:
        - ''
        - - 'arn:aws:acm:'
          - 'us-east-1'
          - ':'
          - 'Ref': 'AWS::AccountId'
          - ':certificate/'
          - '${self:custom.certificateId}'
    bucketName: '${self:custom.region}'
    distributionFolder: dist # Path to the client assets to be uploaded to S3
    indexDocument: index.html # The index document to use
    errorDocument: error.html # The error document to use
    singlePageApp: true # If true 403 errors will be rerouted (missing assets) to your root index document to support single page apps like React and Angular where the js framework handles routing
    compressWebContent: true # Use compression when serving web content
    apiPath: api # The path prefix for your API Gateway lambdas. The path for the lambda http event trigger needs to start with this too eg. api/myMethod
    clientCommand: yarn build
    clientSrcPath: . # The path to where you want to run the clientCommand
    logging:
      bucket: !GetAtt LoggingBucket.RegionalDomainName
      prefix: logs
    minimumProtocolVersion: TLSv1.2_2018
    priceClass: PriceClass_100
    objectHeaders:
      index.html:
        - name: Cache-Control
          value: public, must-revalidate, proxy-revalidate, max-age=0

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.region}

  iam:
    role: ${env:lambdaExecutionRole}
  lambdaHashingVersion: '20201221'

package:
  patterns:
    - '!.cache/**'
    - '!.serverless/**'
    - '!coverage/**'
    - '!images/**'
    - '!sass/**'
    - '!presenter/**'
    - '!views/**'
    - '!favicon/**'

functions:
  getLocations:
    handler: environments/lambda/handlers.getLocations
    environment:
      GIS_TABLE: ${self:service}-gis-${opt:stage}
      API_KEY: ${self:custom.apiKey}
    timeout: 30
    events:
      - http:
          path: ${self:custom.fullstack.apiPath}/v1/get-locations
          method: get
          cors: true

  saveLocation:
    handler: environments/lambda/handlers.saveLocation
    environment:
      GIS_TABLE: ${self:service}-gis-${opt:stage}
      API_KEY: ${self:custom.apiKey}
      CAPTCHA_KEY: ${self:custom.captchaKey}
      GOOGLE_CAPTCHA_GATEWAY: ${self:custom.captchaGateway}
      IMAGE_BUCKET: ${self:custom.imageBucket}
      EMAIL_GATEWAY: ${self:custom.emailGateway}
      EMAIL_USER: ${self:custom.emailUser}
      EMAIL_PW: ${self:custom.emailPW}
      DOMAIN_NAME: ${self:custom.domain}
    timeout: 30
    events:
      - http:
          path: ${self:custom.fullstack.apiPath}/v1/save-location/
          method: post
          cors: true
  getLocation:
    handler: environments/lambda/handlers.getLocation
    environment:
      GIS_TABLE: ${self:service}-gis-${opt:stage}
    timeout: 30
    events:
      - http:
          path: ${self:custom.fullstack.apiPath}/v1/get-location
          method: get
          cors: true
  updateLocationApproval:
    handler: environments/lambda/handlers.updateLocationApproval
    environment:
      GIS_TABLE: ${self:service}-gis-${opt:stage}
      CAPTCHA_KEY: ${self:custom.captchaKey}
      GOOGLE_CAPTCHA_GATEWAY: ${self:custom.captchaGateway}
      EMAIL_GATEWAY: ${self:custom.emailGateway}
      EMAIL_USER: ${self:custom.emailUser}
      EMAIL_PW: ${self:custom.emailPW}
      DOMAIN_NAME: ${self:custom.domain}
    timeout: 30
    events:
      - http:
          path: ${self:custom.fullstack.apiPath}/v1/update-location
          method: post
          cors: true

resources:
  Outputs:
    FullstackDomain:
      Value: ${self:custom.domain}
  Resources:
    # Override DomainName origin generated by `fullstack-serverless` to use RegionalDomainName
    LoggingBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.loggingBucket}
    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageBucket}
    ApiDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - Id: WebApp
              DomainName:
                Fn::GetAtt: [WebAppS3Bucket, RegionalDomainName]
            # Merge images bucket into CloudFront config from fullstack plugin
            - Id: ApiGateway
            - Id: Images
              DomainName: 
                Fn::GetAtt: [ImagesBucket, RegionalDomainName]
              S3OriginConfig:
                OriginAccessIdentity: !Join ['', ["origin-access-identity/cloudfront/", !Ref S3OriginAccessIdentity]]
          CacheBehaviors:
            - {}
            - AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
              CachedMethods:
                - GET
                - HEAD
              ForwardedValues:
                QueryString: true
                Headers:
                  - Accept
                  - Referer
                  - Authorization
                  - Content-Type
                Cookies:
                  Forward: all
              MinTTL: "0"
              DefaultTTL: "0"
              TargetOriginId: Images
              ViewerProtocolPolicy: https-only
              PathPattern: photos/*
    ImagesBucketAllowCloudfrontReadPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ImagesBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:GetObject'
              Resource:
                - !Join ['', ['arn:aws:s3:::', !Ref ImagesBucket, '/*']]
              Principal:
                CanonicalUser: !GetAtt S3OriginAccessIdentity.S3CanonicalUserId
    DynamoDbTableKmsKey:
      Type: AWS::KMS::Key
      Properties:
        EnableKeyRotation: true
        KeyPolicy:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
              Action: kms:*
              Resource: '*'
            - Effect: Allow
              Principal:
                AWS: '*'
              Action:
                - kms:Encrypt
                - kms:Decrypt
              Resource: '*'
              Condition:
                StringEquals:
                  kms:CallerAccount: !Ref AWS::AccountId
                  kms:ViaService: !Sub dynamodb.${AWS::Region}.amazonaws.com    
    GisTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-gis-${opt:stage}
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: hashKey
            KeyType: HASH
          - AttributeName: rangeKey
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: hashKey
            AttributeType: N
          - AttributeName: rangeKey
            AttributeType: S
          - AttributeName: geohash
            AttributeType: N
          - AttributeName: city
            AttributeType: S
          - AttributeName: adminId
            AttributeType: S
          - AttributeName: updateId
            AttributeType: S
        LocalSecondaryIndexes:
          - IndexName: geohash-index
            KeySchema:
              - AttributeName: hashKey
                KeyType: HASH
              - AttributeName: geohash
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        GlobalSecondaryIndexes:
          - IndexName: cityName-index
            KeySchema:
              - AttributeName: city
                KeyType: HASH
              - AttributeName: geohash
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: adminId-index
            KeySchema:
              - AttributeName: adminId
                KeyType: HASH
              - AttributeName: geohash
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: updateId-index
            KeySchema:
              - AttributeName: updateId
                KeyType: HASH
              - AttributeName: geohash
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        SSESpecification:
          KMSMasterKeyId: !Ref DynamoDbTableKmsKey
          SSEEnabled: true
          SSEType: KMS
